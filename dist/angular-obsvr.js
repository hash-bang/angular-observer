angular.module("angular-obsvr",[]).provider("$observeProvider",function(){var _this=this;this.observers=[],this.register=function(observer){this.observers.push(observer)},this.deregister=function(observer){var oIndex=this.observers.findIndex(function(o){return o==observer});oIndex>-1&&this.observers.splice(oIndex,1)},this.checkAll=function(_){return _this.observers.forEach(function(observer){return observer.check()})},this.$get=function(){return this}}).factory("$observe",["$observeProvider","$timeout",function($observeProvider,$timeout){var $observe=function(scope,paths,callback,params){var observe=new Object;if(observe.scope=scope,observe.paths=_.castArray(paths),observe.originalValues={},observe.deep=1,observe.selfDestruct=!0,observe.selfDestructHooks=["change","key","path"],observe.isDestoyed=!1,observe.ignoreInitial="any",observe.isInitial=!0,observe.root=!0,!scope)throw new Error("You must specify a scope to use");if(!paths)throw new Error("You must specify a path or paths to watch");if((_.isObject(callback)||_.isNumber(callback))&&(params=callback,callback=void 0),_.isNumber(params)&&(params.deep=params),_.isObject(params)){if(_.has(params,"deep")){if(!_.isNumber(params.deep)&&params.deep!==!0)throw new Error("Deep config option either should be a maximum depth number or boolean true");observe.deep=params.deep}if(_.has(params,"root")){if(observe.root!==!0&&!_.isNumber(observe.root))throw new Error("Root must be boolean true or a number");observe.root=params.root}if(_.has(params,"selfDestruct")){if(!_.isBoolean(params.selfDestruct))throw new Error("selfDestruct must be a boolean");observe.selfDestruct=params.selfDestruct}if(_.has(params,"selfDestructHooks")){if(!_.isArray(params.selfDestructHooks))throw new Error("selfDestructHooks must be an array");observe.selfDestructHooks=params.selfDestructHooks}if(_.has(params,"ignoreInitial")){if(params.ignoreInitial!==!1&&!_.isString(params.ignoreInitial)&&!_.includes(["once","any","all"]))throw new Error('ignoreInitial must be "never", "any", "all" or boolean false');observe.ignoreInitial=params.ignoreInitial}}return observe.root===!0&&1==observe.paths.length&&(observe.root=observe.paths[0]),observe.get=function(path){return path?_.get(observe.scope,_.isArray(path)?path.join("."):path):observe.scope},observe.traverse=function(cb,path,item,depth){if(!path&&_.isUndefined(item))observe.paths.forEach(function(path){return observe.traverse(cb,path.split("."),observe.get(path),1)});else if(_.isArray(item)){if(_.isNumber(observe.deep)&&depth>observe.deep)return;item.forEach(function(v,k){return observe.traverse(cb,(path||[]).concat([k]),v,depth?depth+1:1)})}else if(_.isObject(item)){if(_.isNumber(observe.deep)&&depth>observe.deep)return;_.keys(item).forEach(function(k){return observe.traverse(cb,(path||[]).concat([k]),item[k],depth?depth+1:1)})}else cb(item,path?path[path.length-1]:"",path||[])},observe.inject=function(){return observe.originalValues={},observe.traverse(function(v,k,path){_.isObject(v)?Object.defineProperty(v,"$clean",{enumerable:!1,value:!0}):_.isPlainObject(v)||(observe.originalValues[path.join(".")]=v)}),observe},observe.isModified=function(path){if(path){var v=observe.get(path);return _.isObject(v)?!v.$clean:observe.originalValues[_.isArray(path)?path.join("."):path]!=v}var modified=[];return observe.traverse(function(v,key,path){observe.isModified(path)&&modified.push(path.join("."))}),modified},observe.check=function(){if(observe.isDestroyed)throw new Error("observer has been destroyed");if(observe.isInitial)switch(observe.ignoreInitial){case!1:case"never":observe.emit("initial",observe.get()),observe.isInitial=!1;break;case"any":if(observe.paths.some(function(p){return void 0===observe.get(p)}))return observe.emit("initial",observe.get()),observe;observe.isInitial=!1;break;case"all":if(observe.paths.every(function(p){return void 0===observe.get(p)}))return observe.emit("initial",observe.get()),observe;observe.isInitial=!1}var modified=observe.isModified();return modified.length&&observe.emit("change",observe.get()),modified.forEach(function(path){var reportPath=observe.root&&path.startsWith(observe.root)?path.substr(observe.root.length+1):path;reportPath.indexOf(".")<0&&observe.emit("key",reportPath,observe.get(path)),observe.emit("path",reportPath,observe.get(path))}),modified.length&&observe.emit("postChange",observe.get()),observe.inject(),modified.length&&observe.emit("postInject",observe.get()),observe.emit("finally"),observe},observe.checkAll=$observeProvider.checkAll,$observeProvider.register(observe),observe.hooks={},observe.emit=function(hook){if(observe.hooks[hook]&&observe.hooks[hook].length){var args=Array.prototype.slice.call(arguments,0),hook=args.shift(),removeOnce=!1;return observe.hooks[hook].forEach(function(hook){hook.cb.apply(observe,args),hook.once&&(removeOnce=!0)}),removeOnce&&(observe.hooks[hook]=observe.hooks[hook].filter(function(hook){return!hook.once}),observe.checkSelfDestruct()),observe}},observe.on=function(hook,cb,params){return observe.hooks[hook]||(observe.hooks[hook]=[]),observe.hooks[hook].push(Object.assign({},{cb:cb,once:!1},params||{})),observe},observe.once=function(hook,cb,params){return observe.on(hook,cb,Object.assign({},{once:!0},params||{}))},observe.one=observe.once,observe.off=function(hook,cb){if(observe.hooks[hook])return observe.hooks[hook]=observe.filter(function(h){return _.isFunction(cb)?h.cb==cb:h.id==cb}),observe.checkSelfDestruct(),observe},observe.destroy=function(method){$observeProvider.deregister(observe),observe.emit("destroy",method||"manual"),observe.isDestroyed=!0},observe.checkSelfDestruct=function(){return observe.selfDestruct&&observe.selfDestructHooks.every(function(hook){return!observe.hooks[hook]||!observe.hooks[hook].length})&&observe.destroy("selfDestruct"),observe},_.isFunction(callback)&&observe.on("change",callback),observe.inject(),$timeout(function(_){return observe.emit("init")}),observe};return $observe.deep=function(scope,path,callback,params){return(_.isObject(callback)||_.isNumber(callback))&&(params=callback,callback=void 0),_.isObject(params)||(params={}),params.deep=!_.isNumber(params)||params,$observe(scope,path,callback,params)},$observe.checkAll=$observeProvider.checkAll,$observe}]);